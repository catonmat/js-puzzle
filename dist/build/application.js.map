{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/puzzle.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA","file":"build/application.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/puzzle.js\");\n","// Part 1: check if the tile can move.\n// 1.1 Attach an event listener to each cell.\ndocument.querySelectorAll('td').forEach( cell => {\n  cell.addEventListener('click', (event) => {\n    // // Print cell data to browser log.\n    // console.log('element', event.currentTarget);\n    // console.log('column', event.currentTarget.cellIndex);\n    // console.log('row', event.currentTarget.parentElement.rowIndex);\n    if (canMove(event.currentTarget)) {\n      console.log('this cell can move');\n      moveTile(event.currentTarget);\n      hasWon();\n    } else {\n      console.log('this cell cannot move')\n    }\n  })\n})\n// 1.2 write a function that checks if the tile can move.\nconst canMove = (tile) => {\n  const tileRow = tile.parentElement.rowIndex;\n  const tileCol = tile.cellIndex;\n  const emptyTile = document.querySelector('.empty');\n  const emptyTileRow = emptyTile.parentElement.rowIndex;\n  const emptyTileCol = emptyTile.cellIndex;\n\n  return (tileRow === emptyTileRow && tileCol === emptyTileCol - 1) ||\n         (tileRow === emptyTileRow && tileCol === emptyTileCol + 1) ||\n         (tileCol === emptyTileCol && tileRow === emptyTileRow - 1) ||\n         (tileCol === emptyTileCol && tileRow === emptyTileRow + 1)\n}\n\n// 1.3 Link the checker function as a callback to the event listener.\n// Completed: Check ll. 9-12.\n\n// Part 2. Move the tile.\nconst moveTile = (tile) => {\n  // 2.1 Select the empty tile.\n  const emptyTile = document.querySelector('.empty');\n  // 2.2 Replace it with the current tile's inner text.\n  emptyTile.innerText = tile.innerText;\n  // 2.3 Remove 'empty' class from previously empty tile.\n  emptyTile.classList.remove('empty');\n  // 2.4 Delete the curent tile's inner text.\n  tile.innerText = \"\";\n  // 2.5 Add 'empty' class to current tile.\n  tile.classList.add('empty');\n}\n\n// 2.6 Link the moveTike function into the callback for the event listener.\n// Completed: check ll. 10-11.\n\n// Part 3. Alert the palyer when the game is won.\nconst hasWon = () => {\n  // 3.1 Define the victory conditions\n  const victoryCondition = \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,NaN\";\n  // 3.2 Build an array of the current state of the tiles.\n  const tiles = Array.from(document.querySelectorAll('td'))\n                     .map( e => parseInt(e.innerText, 10))\n  console.log('tiles array', tiles);\n  // 3.3 Loop through the array and validate the victory condition\n  if (tiles.join() === victoryCondition) {\n    alert(\"You have won!\");\n  }\n}\n\n// Optional: Build a button that automatically wins the game\nconst button = document.querySelector('.hint');\nbutton.addEventListener('click', () => {\n  winGame()\n})\nconst winGame = () => {\n  let cells = Array.from(document.querySelectorAll('td'))\n                   .forEach( cell => cell.classList.remove('empty'));\n  for (let i = 0; i < 15; i++) {\n    debugger\n    cells[i].innerText = i;\n    if (i === 15) {\n      cells[i].classList.add('empty');\n    }\n  }\n}\n\n\n\n\n\n\n"],"sourceRoot":""}